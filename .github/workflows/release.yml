name: release xcframework

on:
   workflow_dispatch:
   schedule:
    - cron: "0 8 * * 1"

jobs:
  release:
    runs-on: macos-latest
    steps:
      - name: Checkout Current
        uses: actions/checkout@v4
        with:
          path: 'current'

      - name: Determine Release Tag
        run: |
          MMKV_TAG=$(curl -s -L -o /dev/null -w "%{url_effective}\n" https://github.com/Tencent/MMKV/releases/latest | sed 's|.*/tag/\(.*\)|\1|')
          echo "[*] upstream mmkv tag: $MMKV_TAG"

          # make sure tag is in format v%d.%d.%d
          if [[ ! $MMKV_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "[*] invalid openssl tag, skip pipeline: $MMKV_TAG"
            exit 0
          fi
          
          MAJOR_VERSION=$(echo $MMKV_TAG | cut -d'.' -f1 | sed 's/v//')
          MINOR_VERSION=$(echo $MMKV_TAG | cut -d'-' -f2 | cut -d'.' -f2)
          PATCH_VERSION=$(echo $MMKV_TAG | cut -d'-' -f2 | cut -d'.' -f3)
          echo "[*] tag validated, major: $MAJOR_VERSION, minor: $MINOR_VERSION, patch: $PATCH_VERSION"
          
          BUILD_TAG=$MMKV_TAG
          echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV
          RELEASE_TAG="$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION"
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV

      - name: Check If Compile Required
        run: |
          echo "[*] wants build tag: $BUILD_TAG"

          cd current
          git pull --tags
          if git rev-parse "$RELEASE_TAG" >/dev/null 2>&1; then
              echo "[*] tag $RELEASE_TAG already exists, exiting"
              echo "UPDATE_NEEDED=false" >> $GITHUB_ENV
          else
              echo "[*] tag $RELEASE_TAG does not exist, pass to build"
              echo "UPDATE_NEEDED=true" >> $GITHUB_ENV
          fi
          
      - name: Checkout
        uses: actions/checkout@v4
        if: env.UPDATE_NEEDED == 'true'
        with:
          repository: 'Tencent/MMKV'
          ref: ${{ env.BUILD_TAG }}
          path: 'MMKV'

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        if: env.UPDATE_NEEDED == 'true'
        with:
          xcode-version: latest-stable
          
      - name: Build Binaries
        if: env.UPDATE_NEEDED == 'true'
        run: |
          echo "[*] build tag: $BUILD_TAG"
          echo "[*] release tag: $RELEASE_TAG"

          cd MMKV
          rm -rf archives

          xcodebuild archive \
          -workspace MMKV.xcworkspace \
          -scheme MMKV \
          -configuration Release \
          -destination "generic/platform=iOS" \
          -archivePath "archives/MMKV-iOS" \
          SKIP_INSTALL=NO \
          BUILD_LIBRARY_FOR_DISTRIBUTION=YES
          
          xcodebuild archive \
          -workspace MMKV.xcworkspace \
          -scheme MMKV \
          -configuration Release \
          -destination "generic/platform=iOS Simulator" \
          -archivePath "archives/MMKV-iOS-Simulator" \
          SKIP_INSTALL=NO \
          BUILD_LIBRARY_FOR_DISTRIBUTION=YES
          
          xcodebuild archive \
          -workspace MMKV.xcworkspace \
          -scheme MMKV \
          -configuration Release \
          -destination "generic/platform=tvOS" \
          -archivePath "archives/MMKV-tvOS" \
          SKIP_INSTALL=NO \
          BUILD_LIBRARY_FOR_DISTRIBUTION=YES
          
          xcodebuild archive \
          -workspace MMKV.xcworkspace \
          -scheme MMKV \
          -configuration Release \
          -destination "generic/platform=tvOS Simulator" \
          -archivePath "archives/MMKV-tvOS-Simulator" \
          SKIP_INSTALL=NO \
          BUILD_LIBRARY_FOR_DISTRIBUTION=YES
          
          xcodebuild archive \
          -workspace MMKV.xcworkspace \
          -scheme MMKV \
          -configuration Release \
          -destination "generic/platform=macOS" \
          -archivePath "archives/MMKV-macOS" \
          SKIP_INSTALL=NO \
          BUILD_LIBRARY_FOR_DISTRIBUTION=YES
          
          xcodebuild archive \
          -workspace MMKV.xcworkspace \
          -scheme MMKV \
          -configuration Release \
          -destination "generic/platform=macOS,variant=Mac Catalyst" \
          -archivePath "archives/MMKV-macOS-Catalyst" \
          SKIP_INSTALL=NO \
          BUILD_LIBRARY_FOR_DISTRIBUTION=YES
          SUPPORTS_MACCATALYST=YES
          
          xcodebuild archive \
          -workspace MMKV.xcworkspace \
          -scheme MMKV \
          -configuration Release \
          -destination "generic/platform=visionOS" \
          -archivePath "archives/MMKV-visionOS" \
          SKIP_INSTALL=NO \
          BUILD_LIBRARY_FOR_DISTRIBUTION=YES
          
          xcodebuild archive \
          -workspace MMKV.xcworkspace \
          -scheme MMKV \
          -configuration Release \
          -destination "generic/platform=visionOS Simulator" \
          -archivePath "archives/MMKV-visionOS-Simulator" \
          SKIP_INSTALL=NO \
          BUILD_LIBRARY_FOR_DISTRIBUTION=YES
          
          xcodebuild \
          -create-xcframework \
          -archive archives/MMKV-iOS.xcarchive -framework MMKV.framework \
          -archive archives/MMKV-iOS-Simulator.xcarchive -framework MMKV.framework \
          -archive archives/MMKV-tvOS.xcarchive -framework MMKV.framework \
          -archive archives/MMKV-tvOS-Simulator.xcarchive -framework MMKV.framework \
          -archive archives/MMKV-macOS.xcarchive -framework MMKV.framework \
          -archive archives/MMKV-macOS-Catalyst.xcarchive -framework MMKV.framework \
          -archive archives/MMKV-visionOS.xcarchive -framework MMKV.framework \
          -archive archives/MMKV-visionOS-Simulator.xcarchive -framework MMKV.framework \
          -output archives/MMKV.xcframework
          
          zip -r -X "archives/MMKV.xcframework.zip" "archives/MMKV.xcframework"
          
      - name: Compute Checksum
        if: env.UPDATE_NEEDED == 'true'
        run: |
          echo "CHECKSUM=$(swift package compute-checksum ./MMKV/archives/MMKV.xcframework.zip)" >> $GITHUB_ENV

      - name: Update Package.swift
        if: env.UPDATE_NEEDED == 'true'
        run: |
          DOWNLOAD_URL='https://github.com/onepiece-studio/mmkv/releases/download/${{ env.RELEASE_TAG }}/MMKV.xcframework.zip'
          CHECKSUM=${{ env.CHECKSUM }}
          cd current
          rm -rf Package.swift
          cp -f Package.swift.template Package.swift

          sed -i "s|__DOWNLOAD_URL__|$DOWNLOAD_URL|g" Package.swift
          sed -i "s|__CHECKSUM__|$CHECKSUM|g" Package.swift

          echo "Generate Package.swift:"
          cat Package.swift

      - name: Push Package.swift
        uses: EndBug/add-and-commit@v9
        if: env.UPDATE_NEEDED == 'true'
        with:
          default_author: github_actions
          add: |
            - Package.swift
          cwd: './current'
          message: "chore: bump version to ${{ env.RELEASE_TAG }}"
          push: "origin HEAD:${{ github.ref_name }}"
          
      - name: Create Release
        uses: ncipollo/release-action@v1
        if: env.UPDATE_NEEDED == 'true'
        with:
          body: |
            checksum: `${{ env.CHECKSUM }}`
          allowUpdates: true
          artifacts: "MMKV/archives/MMKV.xcframework.zip"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.RELEASE_TAG }}

      - name: Keepalive Workflow
        uses: gautamkrishnar/keepalive-workflow@v2
